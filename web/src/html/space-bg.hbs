<html>
  <head>
    <style type="text/css">
      body {
        padding: 0;
	      margin: 0;
        background: #0E131A;
      }
      canvas
      {
        width: 100%;
        height: 100vh;
      }
      .plaque
      {
        position: absolute;
        z-index: 1;
        top: 10%; 
        right: 50%;
        transform: translate(50%,0%);
      }
      .text
      {
        text-align: center;
        text-transform: uppercase;
        font-family: verdana;
        font-size: 8em;
        font-weight: 700;
        color: #f5f5f5;
        text-shadow:
          1px 1px 1px #919191,
          1px 2px 1px #919191,
          1px 3px 1px #919191,
          1px 4px 1px #919191,
          1px 18px 6px rgba(16,16,16,0.4),
          1px 22px 10px rgba(16,16,16,0.2),
          1px 25px 35px rgba(16,16,16,0.2),
          1px 30px 60px rgba(16,16,16,0.4);
      }
      .subtext
      {
        text-align: center;
        text-transform: uppercase;
        font-family: verdana;
        font-size: 2em;
        font-weight: 700;
        color: #f5f5f5;
        text-shadow:
          1px 1px 1px #919191,
          1px 2px 1px #919191,
          1px 3px 1px #919191,
          1px 4px 1px #919191,
          1px 18px 6px rgba(16,16,16,0.4),
          1px 22px 10px rgba(16,16,16,0.2),
          1px 25px 35px rgba(16,16,16,0.2),
          1px 30px 60px rgba(16,16,16,0.4);
      }
    </style>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r74/three.min.js"></script>
  </head>
  <body>
    <div class="intro-card">
      <div class="plaque">
      </div>
      <script type="text/javascript">

const vs = `
attribute vec4 position;
void main()	{
  gl_Position = position;
}
`;
const userShader = `
//CBS
//Parallax scrolling fractal galaxy.
//Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr

// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/
float field( in vec3 p, float s ) {
  float strength = 9. + .03 * log( 1.e-6 + fract( sin(iTime) * 4373.11 ) );
  float accum = s/30.;
  float prev = 0.;
  float tw = 0.;
  for ( int i = 0; i < 27; ++i ) {
    float mag = dot(p, p);
    p = abs(p) / mag + vec3(-.5, -.4, -1.5);
    float w = exp(-float(i) / 7.);
    accum += w * exp(-strength * pow(abs(mag - prev), 2.2));
    tw += w;
    prev = mag;
  }
  return max(0., 5. * accum / tw - .7);
}

// Less iterations for second layer
float field2( in vec3 p, float s ) {
  float strength = 12. + .03 * log( 1.e-6 + fract( sin(3.) * 4373.11 ) );
  float accum = s/4.;
  float prev = 0.;
  float tw = 0.;
  for ( int i = 0; i < 18; ++i ) {
    float mag = dot(p, p);
    p = abs(p) / mag + vec3(-.5, -.4, -1.5);
    float w = exp(-float(i) / 7.);
    accum += w * exp(-strength * pow(abs(mag - prev), 2.2));
    tw += w;
    prev = mag;
  }
  return max( 0., 5. * accum / tw - .7 );
}

vec3 nrand3( vec2 co )
{
  vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );
  vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );
  vec3 c = mix( a, b, 0.5 );
  return c;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
  float timeMod = .0001;

  vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;
  vec2 uvs = uv * iResolution.xy / max( iResolution.x, iResolution.y );
  vec3 p = vec3( uvs / 4., 0 ) + vec3( 1., -1.3, 0. );
  p +=
    .2
      * vec3(
        sin( iTime * timeMod / 16. ),
        sin( iTime * timeMod / 12. ),
        sin( iTime / 128. )
      );

  float freqs[4];
  //Sound
  freqs[0] = .6;//texture( iChannel0, vec2( 0.01, 0.25 ) ).x;
  freqs[1] = .6;//texture( iChannel0, vec2( 0.07, 0.25 ) ).x;
  freqs[2] = .4;//texture( iChannel0, vec2( 0.15, 0.25 ) ).x;
  freqs[3] = .6;//texture( iChannel0, vec2( 0.30, 0.25 ) ).x;

  float t = field( p, freqs[2] );
  float v =
    (
      1.
      - exp(
          (abs( uv.x ) - 1.)
          * 6.
        )
    )
      * (
        1. - exp(
          (abs( uv.y ) - 1.)
          * 6.
        )
      );

  //Second Layer
  vec3 p2 =
    vec3(
      uvs / (
        4.
        + sin(iTime * 0.011) * 0.2
        + 0.2
        + sin(iTime * 0.015) * 0.3
        + 0.4
      ),
      1.5
    )
    + vec3(
      2.,
      -1.3,
      -1.
    );

  p2 +=
    0.25
      * vec3(
        sin(iTime * .16 / 16.),
        sin(iTime *.001 / 12.),
        sin(iTime * .001 / 128.)
      );

  float t2 = field2( p2, freqs[3] );
  vec4 c2 =
    mix(.4, 1., v)
      * vec4(
        1.3 * t2 * t2 * t2,
        1.8 * t2 * t2 ,
        t2 * freqs[0],
        t2
      );

  //Let's add some stars
  //Thanks to http://glsl.heroku.com/e#6904.0
  vec2 seed = p.xy * 2.0;	
  seed = floor( seed * iResolution.x );
  vec3 rnd = nrand3( seed );
  vec4 starcolor = vec4(pow( rnd.y, 40.0 ));

  //Second Layer
  vec2 seed2 = p2.xy * 2.0;
  seed2 = floor( seed2 * iResolution.x );
  vec3 rnd2 = nrand3( seed2 );
  starcolor += vec4( pow( rnd2.y, 40.0 ) );

  fragColor =
    mix(freqs[3]-.3, 1., v)
      * vec4(
        1.5 * freqs[2] * t * t * t,
        1.2 * freqs[1] * t * t,
        freqs[3] * t,
        1.0
      )
    + c2 + starcolor;
}
`;

// FROM shadertoy.com 
const shadertoyBoilerplate = `
#extension GL_OES_standard_derivatives : enable
//#extension GL_EXT_shader_texture_lod : enable
#ifdef GL_ES
precision highp float;
#endif
uniform vec3      iResolution;
uniform float     iGlobalTime;
uniform float     iChannelTime[4];
uniform vec4      iMouse;
uniform vec4      iDate;
uniform float     iSampleRate;
uniform vec3      iChannelResolution[4];
uniform int       iFrame;
uniform float     iTimeDelta;
uniform float     iFrameRate;
uniform float iTime;
struct Channel
{
    vec3  resolution;
    float time;
};
uniform Channel iChannel[4];
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;
uniform sampler2D iChannel3;
void mainImage( out vec4 c,  in vec2 f );

${userShader}

void main( void ){
  vec4 color = vec4(0.0,0.0,0.0,1.0);
  mainImage( color, gl_FragCoord.xy );
  color.w = 1.0;
  gl_FragColor = color;
}
`;

const $ = document.querySelector.bind(document);

const camera = new THREE.Camera();
camera.position.z = 1;

const scene = new THREE.Scene();

const geometry = new THREE.BufferGeometry();
const vertices = new Float32Array([
  -1, -1, 
    1, -1, 
  -1,  1, 
  -1,  1, 
    1, -1, 
    1,  1, 
]);
geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 2 ) );

const uniforms = {
  iGlobalTime: { type: "f", value: 1.0 },
  iTime: { type: "f", value: 1.0 },
  iResolution: { type: "v3", value: new THREE.Vector3() },
};

const material = new THREE.RawShaderMaterial({
  uniforms: uniforms,
  vertexShader: vs,
  fragmentShader: shadertoyBoilerplate,
});

var mesh = new THREE.Mesh(geometry, material);
scene.add(mesh);

var renderer = new THREE.WebGLRenderer();
var introCard = document.querySelector('.intro-card');
introCard.insertBefore(renderer.domElement, introCard.firstChild);
//document.body.appendChild(renderer.domElement);

resize(true);
render(0);

function resize(force) {
  var canvas = renderer.domElement;
  var dpr    = 1; //window.devicePixelRatio;  // make 1 or less if too slow
  var width  = window.innerWidth;
  var height = window.innerHeight;
  if (force || width != canvas.width || height != canvas.height) {
    renderer.setSize( width, height, false );
    uniforms.iResolution.value.x = renderer.domElement.width;
    uniforms.iResolution.value.y = renderer.domElement.height;
  }
}

function render(time) {
  resize(true);
  // uniforms.iTime.value = time + .001;
  // uniforms.iGlobalTime.value = time + .001;
  uniforms.iTime.value = uniforms.iGlobalTime.value = time * 0.0009;
  renderer.render(scene, camera);
  requestAnimationFrame(render);
}

setTimeout(function () {
  window.location.reload();
}, 15 * 60 * 1000);
      </script>
    </div>
    <div>
      <br />
      <br />
      <br />
      <br />
      <br />
      <br />
      <br />
      <br />
    </div>
  </body>
</html>
